package ${package}.${moduleName}.controller;


import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ModelAttribute;
import com.kiiik.pub.bean.Page;
import com.kiiik.pub.bean.ResultBean;
import com.kiiik.pub.mybatis.service.GenericService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.validation.annotation.Validated;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;

/**
 * ${comments}
 * 请求控制层
 * 作者: ${author}
 * 邮件: ${email}
 * 日期: ${datetime}
 */
@RestController
@RequestMapping("${classname}")
@Api(value = "**管理", description = "***基本信息操作API", tags = "${className}Api")
public class ${className}Controller {

	Log log = LogFactory.getLog(${className}Controller.class);
	/**
	*通用的service接口
	**/
	@Autowired
	GenericService genericService;
	/**
	*服务接口
	**/
    @Autowired
    private ${className}Service ${classname}Service;

   
    /**
     * 
     *作者 : ${author}<br>
     *数据列表<br>
     *创建时间: ${datetime}
     *@param 
     *@return
     */
    @SuppressWarnings("unchecked")
    @PostMapping("/list")
    @ApiOperation(value = "/list", notes = "列表信息 ")
    public ResultBean<List<${className}Entity>> list(@RequestBody ${className}Entity entity){
       List<${className}Entity> entitys = genericService.queryDBEntityList(entity);
        return new ResultBean<List<${className}Entity>>(entitys).success();
    }
    
     /**
     * 
     *作者 : ${author}<br>
     *数据列表分页查询<br>
     *创建时间: ${datetime}
     *@param 
     *@return
     */
    @SuppressWarnings("unchecked")
	@GetMapping("listPage")
	@ApiOperation(value = "/listPage", notes = "分页查询 ")
	public ResultBean<List<${className}Entity>> listUsersPage(${className}Entity entity,@ModelAttribute @Validated Page page) {
		List<${className}Entity> entitys = genericService.queryDBEntityList(entity, page.getPageNum(), page.getPageSize(), " id asc");
		return new ResultBean<List<${className}Entity>>(entitys).success();
	}
    
    /**
     * 
     *作者 : ${author}<br>
     *新增记录<br>
     *创建时间: ${datetime}
     *@param 
     *@return
     */
	@PostMapping("add")
	@ApiOperation(value="add",notes="新增信息")
	public ResultBean<String> add${className}Entity(@RequestBody ${className}Entity entity){
		return ${classname}Service.add${className}Entity(entity);
		
	}
	
	/**
     * 
     *作者 : ${author}<br>
     *更新记录<br>
     *创建时间: ${datetime}
     *@param 
     *@return
     */
	@PostMapping("update")
	@ApiOperation(value="update",notes="更新信息")
	public ResultBean<String> upd${className}Entity(@RequestBody ${className}Entity entity){
		return ${classname}Service.upd${className}Entity(entity);
	}
	
	 /**
     * 
     *作者 : ${author}<br>
     *根据主键删除记录<br>
     *创建时间: ${datetime}
     *@param 
     *@return
     */
	@GetMapping("deleteById")
	@ApiOperation(value="deleteById",notes="根据主键删除信息")
	public ResultBean<String> del${className}Entity(Integer id){
		return ${classname}Service.del${className}Entity(id);
	}

}
