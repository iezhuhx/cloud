package ${package}.*.controller;


import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.util.CollectionUtils;
import com.kiiik.pub.bean.KiiikPage;
import com.kiiik.pub.bean.PageData;
import com.kiiik.pub.bean.R;
import com.kiiik.pub.mybatis.service.GenericService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.validation.annotation.Validated;
import ${package}.*.entity.${className}Entity;
import ${package}.*.service.${className}Service;

/**
 * ${comments}<br>
 * 请求控制层<br>
 * 作者: ${author}<br>
 * 邮件: ${email}<br>
 * 日期: ${datetime}<br>
 */
@RestController
@RequestMapping("${classname}")
@Api(value = "**管理", description = "***基本信息操作API", tags = "${className}Api")
public class ${className}Controller {

	Log log = LogFactory.getLog(${className}Controller.class);
	/**
	*通用的service接口
	**/
	@Autowired
	GenericService genericService;
	/**
	*服务接口
	**/
    @Autowired
    private ${className}Service ${classname}Service;

   
    /**
     * 
     *作者 : ${author}<br>
     *数据列表<br>
     *创建时间: ${datetime}<br>
     *@param 
     *@return
     */
    @SuppressWarnings("unchecked")
    @GetMapping("/list")
    @ApiOperation(value = "/list", notes = "列表信息 ")
    public R<List<${className}Entity>> list(@RequestBody ${className}Entity entity){
       List<${className}Entity> entitys = genericService.queryDBEntityList(entity);
        return new R<List<${className}Entity>>(entitys).success();
    }
    
     /**
     * 
     *作者 : ${author}<br>
     *数据列表分页查询<br>
     *创建时间: ${datetime}<br>
     *@param 
     *@return
     */
    @SuppressWarnings("unchecked")
	@GetMapping("listPage")
	@ApiOperation(value = "/listPage", notes = "分页查询 ")
	public R<List<${className}Entity>> listUsersPage(${className}Entity entity,@ModelAttribute @Validated KiiikPage page) {
        if(page.needAll()){//当分页参数不传时传回所有记录
            return new R<PageData<${className}Entity>>(new PageData<${className}Entity>(genericService.queryDBEntityListLike(entity," id desc"))).success();
        }else{
            Page<${className}Entity> datas = genericService.queryDBEntityListLike(entity, page," id desc");
            return new R<PageData<${className}Entity>>(new PageData<${className}Entity>(datas,page)).success();
        }
		return new R<List<${className}Entity>>(entitys).success();
	}
    
    /**
     * 
     *作者 : ${author}<br>
     *新增记录<br>
     *创建时间: ${datetime}<br>
     *@param 
     *@return
     */
	@PutMapping("add")
	@ApiOperation(value="add",notes="新增信息")
	public R<String> add${className}Entity(@RequestBody ${className}Entity entity){
		return ${classname}Service.add${className}Entity(entity);
		
	}
	
	/**
     * 
     *作者 : ${author}<br>
     *更新记录<br>
     *创建时间: ${datetime}<br>
     *@param 
     *@return
     */
	@PostMapping("update")
	@ApiOperation(value="update",notes="更新信息")
	public R<String> upd${className}Entity(@RequestBody ${className}Entity entity){
		return ${classname}Service.upd${className}Entity(entity);
	}
	
	 /**
     * 
     *作者 : ${author}<br>
     *根据主键删除记录<br>
     *创建时间: ${datetime}<br>
     *@param 
     *@return
     */
	@DeleteMapping("deleteById")
	@ApiOperation(value="deleteById",notes="根据主键删除信息")
	public R<String> del${className}Entity(Long id){
	    return ${classname}Service.del${className}Entity(id);
	}
    /**
     *
     *作者 : iechenyb<br>
     *方法描述: 删除信息<br>
     *创建时间: 2018年11月20日
     *@param id
     *@return
     */
    @DeleteMapping("{id}")
    @ApiOperation("删除信息，支持批量")
    public R<String> delete(@PathVariable String[] id){
        log.info("delete");
        List<String> ids = new ArrayList<String>();
        for(int i=0;i<id.length;i++){
            ids.add(id[i]);
			//${classname}Service.del${className}Entity(id);
        }
        return new R<String>(ids.toString()).success();
    }

}
